{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TAU Introduction TAU provides a single, locally-managed websocket connection for all of Twitch's realtime APIs. Currently, Twitch's realtime APIs are broken up into EventSub WebHooks and PubSub WebSockets. In order for a Twitch bot or overlay to be interractive, it needs to tap into the realtime events sent over the Twitch APIs. This typically requires setting up multiple protocols: a webhook on the server-side and websockets on the client-side. It also requires you to keep track of multiple Twitch access tokens. This is where TAU comes in! TAU takes care of all this for you and also adds the ability to replay past events and generate test events of your own from a user friendly UI. Additionally, all events are stored in a database.","title":"Home"},{"location":"#tau","text":"","title":"TAU"},{"location":"#introduction","text":"TAU provides a single, locally-managed websocket connection for all of Twitch's realtime APIs. Currently, Twitch's realtime APIs are broken up into EventSub WebHooks and PubSub WebSockets. In order for a Twitch bot or overlay to be interractive, it needs to tap into the realtime events sent over the Twitch APIs. This typically requires setting up multiple protocols: a webhook on the server-side and websockets on the client-side. It also requires you to keep track of multiple Twitch access tokens. This is where TAU comes in! TAU takes care of all this for you and also adds the ability to replay past events and generate test events of your own from a user friendly UI. Additionally, all events are stored in a database.","title":"Introduction"},{"location":"env_options/","text":"Environment Variables The following environment variables can be used to manipulate your Tau install. Key Description Default Value PUBLIC_URL Hostname used to communicate with TAU localhost PROTOCOL Protocol being used, either \"http:\" or \"https:\" http: PORT Port for the application to listen on 8000 BEHIND_PROXY Whether or not the application is running behind a reverse proxy (like NGINX) False USE_NGROK Whether or not to use NGROK to allow running TAU locally without port forwarding False NGROK_TOKEN Token used for authenticating with NGROK '' REDIS_ENDPOINT Address and Port to connect to Redis at redis:6379 REDIS_PW Password used to authenticate with Redis '' DJANGO_DB_TYPE Database types django uses, options are postgres and sqlite postgres DJANGO_DB Name of the database tau_db DJANGO_DB_URL Hostname of the database db DJANGO_DB_USER Username to connect to the database with tau_db DJANGO_DB_PW Password for the DJANGO_DB_USER '' DJANGO_CONFIGURATION Configuration django uses Local DJANGO_SECRET_KEY Key used by Django for keeping your data stored securely None TWITCH_CLIENT_ID Application ID for connecting to twitch '' TWITCH_CLIENT_SECRET Used for communicating with the twitch API '' TWITCH_WEBHOOK_SECRET Used for signing the webhooks from twitch to validate they are legitimate ''","title":"Enviromental Options"},{"location":"env_options/#environment-variables","text":"The following environment variables can be used to manipulate your Tau install. Key Description Default Value PUBLIC_URL Hostname used to communicate with TAU localhost PROTOCOL Protocol being used, either \"http:\" or \"https:\" http: PORT Port for the application to listen on 8000 BEHIND_PROXY Whether or not the application is running behind a reverse proxy (like NGINX) False USE_NGROK Whether or not to use NGROK to allow running TAU locally without port forwarding False NGROK_TOKEN Token used for authenticating with NGROK '' REDIS_ENDPOINT Address and Port to connect to Redis at redis:6379 REDIS_PW Password used to authenticate with Redis '' DJANGO_DB_TYPE Database types django uses, options are postgres and sqlite postgres DJANGO_DB Name of the database tau_db DJANGO_DB_URL Hostname of the database db DJANGO_DB_USER Username to connect to the database with tau_db DJANGO_DB_PW Password for the DJANGO_DB_USER '' DJANGO_CONFIGURATION Configuration django uses Local DJANGO_SECRET_KEY Key used by Django for keeping your data stored securely None TWITCH_CLIENT_ID Application ID for connecting to twitch '' TWITCH_CLIENT_SECRET Used for communicating with the twitch API '' TWITCH_WEBHOOK_SECRET Used for signing the webhooks from twitch to validate they are legitimate ''","title":"Environment Variables"},{"location":"irc_bot_setup/","text":"IRC Chatbot Setup TAU automatically connects your streamer user to chat if you have the User IRC option enabled in the Config panel. If you would like to enable IRC Bots with different accounts (e.g.- YourBotName) you can do so by following the instructions below. Once your bot accounts are set up, you can subscribe to their websocket connection following the instructions here [link to instructions] IRC Bot Setup Go to ChatBots tab in the dashboard. Click the [+] button in the upper right corner of the Chat Bot Status card. Click \"Copy URL\" in the resulting modal. Open a new browser instance (preferably private/incognito mode) and paste the url in the address bar. Log in as the bot account you want to enable, and click \"Authorize\" Close this browser window when instructed to do so, and refresh the TAU dashboard. You should now see your bot listed. Click add next to your bot's name to add a channel for the bot to join. In the resulting modal, enter the Twitch User's channel for the bot. Your bot should now be ready to do all of its bot things. Go to [link to instructions] to link up your bot code to TAU.","title":"IRC Chatbot Setup"},{"location":"irc_bot_setup/#irc-chatbot-setup","text":"TAU automatically connects your streamer user to chat if you have the User IRC option enabled in the Config panel. If you would like to enable IRC Bots with different accounts (e.g.- YourBotName) you can do so by following the instructions below. Once your bot accounts are set up, you can subscribe to their websocket connection following the instructions here [link to instructions]","title":"IRC Chatbot Setup"},{"location":"irc_bot_setup/#irc-bot-setup","text":"Go to ChatBots tab in the dashboard. Click the [+] button in the upper right corner of the Chat Bot Status card. Click \"Copy URL\" in the resulting modal. Open a new browser instance (preferably private/incognito mode) and paste the url in the address bar. Log in as the bot account you want to enable, and click \"Authorize\" Close this browser window when instructed to do so, and refresh the TAU dashboard. You should now see your bot listed. Click add next to your bot's name to add a channel for the bot to join. In the resulting modal, enter the Twitch User's channel for the bot. Your bot should now be ready to do all of its bot things. Go to [link to instructions] to link up your bot code to TAU.","title":"IRC Bot Setup"},{"location":"new_tau_changes/","text":"Breaking Changes for recent TAU version A recent release of TAU created some breaking changes from the original version of TAU. The new version of TAU now allows you to chose the specific EventSub subscriptions you want to subscribe to, and moves all of the View Subscription events (Subscribe, Gift Sub, etc..) from PubSub to EventSub. In order to accomodate these new features, the event naming convention was changed, which may break any existing integrations you have set up with older versions of TAU. Specifically, the following event names were changed: old: update , new: channel-update old: follow , new: channel-follow old: point-redemption , new: channel-channel_points_custom_reward_redemption-add old: cheer , new: channel-cheer old: subscribe , new: channel-subscribe old: raid , new: channel-raid old: hype-train-progress , new: channel-hype_train-progress old: hype-train-begin , new: channel-hype_train-begin old: hype-train-end , new: channel-hype_train-end Additionally, on your first run of the new TAU version, you will need to select the EventSub events you want to subscribe to. Once you load the dashboard, \"Config\" in the side menu, toggle on all of the Twitch EventSub Subscriptions you require, then click the \"Update Subscriptions\" button at the bottom of the subscription list, and approve the new required scopes.","title":"Breaking Changes for recent TAU version"},{"location":"new_tau_changes/#breaking-changes-for-recent-tau-version","text":"A recent release of TAU created some breaking changes from the original version of TAU. The new version of TAU now allows you to chose the specific EventSub subscriptions you want to subscribe to, and moves all of the View Subscription events (Subscribe, Gift Sub, etc..) from PubSub to EventSub. In order to accomodate these new features, the event naming convention was changed, which may break any existing integrations you have set up with older versions of TAU. Specifically, the following event names were changed: old: update , new: channel-update old: follow , new: channel-follow old: point-redemption , new: channel-channel_points_custom_reward_redemption-add old: cheer , new: channel-cheer old: subscribe , new: channel-subscribe old: raid , new: channel-raid old: hype-train-progress , new: channel-hype_train-progress old: hype-train-begin , new: channel-hype_train-begin old: hype-train-end , new: channel-hype_train-end Additionally, on your first run of the new TAU version, you will need to select the EventSub events you want to subscribe to. Once you load the dashboard, \"Config\" in the side menu, toggle on all of the Twitch EventSub Subscriptions you require, then click the \"Update Subscriptions\" button at the bottom of the subscription list, and approve the new required scopes.","title":"Breaking Changes for recent TAU version"},{"location":"api/authentication/","text":"Authentication For clients to authenticate, the token key should be included in the Authorization HTTP header. The key should be prefixed by the string literal \"Token\", with whitespace separating the two strings. For example: Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b Unauthenticated responses that are denied permission will result in an HTTP 401 Unauthorized response with an appropriate WWW-Authenticate header. For example: WWW-Authenticate: Token The curl command line tool may be useful for testing token authenticated APIs. For example: curl -X GET http://127.0.0.1:8000/api/v1/example/ -H 'Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b' Retrieving Tokens Authorization tokens are issued and returned when a user registers. A registered user can also retrieve their token with the following request: Request : POST api-token-auth/ Parameters: Name Type Description username string The user's username password string The user's password Response : { \"token\" : \"9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b\" }","title":"Authentication"},{"location":"api/authentication/#authentication","text":"For clients to authenticate, the token key should be included in the Authorization HTTP header. The key should be prefixed by the string literal \"Token\", with whitespace separating the two strings. For example: Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b Unauthenticated responses that are denied permission will result in an HTTP 401 Unauthorized response with an appropriate WWW-Authenticate header. For example: WWW-Authenticate: Token The curl command line tool may be useful for testing token authenticated APIs. For example: curl -X GET http://127.0.0.1:8000/api/v1/example/ -H 'Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b'","title":"Authentication"},{"location":"api/authentication/#retrieving-tokens","text":"Authorization tokens are issued and returned when a user registers. A registered user can also retrieve their token with the following request: Request : POST api-token-auth/ Parameters: Name Type Description username string The user's username password string The user's password Response : { \"token\" : \"9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b\" }","title":"Retrieving Tokens"},{"location":"api/connecting/","text":"Connecting To TAU TAU provides two different APIs- A websocket that broadcasts realtime Twitch events, test events, and replayed events. A REST API the provides access to a passthrough of the Twitch Helix API, as well as endpoints for accessing the data captured and stored by TAU. Getting your TAU token. A TAU token is required for both the realtime websocket API and the REST API. To obtain your token, go to the TAU Dashboard, click the hamburger menu, then click Show Auth Token Connecting to the realtime websocket. TAU exposes a websocket endpoint at ws://localhost:PORT/ws/twitch-events/ for a local deployment or wss://yourdomain:PORT/ws/twitch-events/ for a served deployment. After connecting your client to the websocket, you must send a message containing the following json object: { \"token\": \"YOUR TAU TOKEN HERE\" } After receiving your token, TAU will begin to broadcast incoming twitch events to your client. Connecting to the REST API TAU also provides 2 separate REST APIs. A passthrough of the Twitch Helix API at: /api/twitch/helix , and access to the data captured and stored by TAU at /api/v1 . In order to authenticate requests, you must include an Authorization header: Authorization: Token YOUR-TAU-TOKEN-HERE The Update Token Scopes page from the dashboard will allow you to add scopes to the Twitch token used by TAU. Connecting to Chat Bot Websockets TAU also provides websockets for your streamer user chat, and any chat bots you have set up at ws/chat-bots/<chat-bot-username>/ where <chat-bot-username> is the all-lowercase twitch username of your streamer account or any chat-bot accounts you have set up in TAU. After connecting your client to the websocket, you must send a message containing the following json object: { \"token\": \"YOUR TAU TOKEN HERE\" } After receiving your token, TAU will begin to broadcast incoming twitch chat events to your client. You can also send outgoing messages to be posted in chat by your bot. Simply send the following payload to the endpoint of the bot you would like to have \"speak\": { \"irc_channel\": \"channel_to_send_to\", \"message\": \"message to post in channel.\" }","title":"Connecting"},{"location":"api/connecting/#connecting-to-tau","text":"TAU provides two different APIs- A websocket that broadcasts realtime Twitch events, test events, and replayed events. A REST API the provides access to a passthrough of the Twitch Helix API, as well as endpoints for accessing the data captured and stored by TAU.","title":"Connecting To TAU"},{"location":"api/connecting/#getting-your-tau-token","text":"A TAU token is required for both the realtime websocket API and the REST API. To obtain your token, go to the TAU Dashboard, click the hamburger menu, then click Show Auth Token","title":"Getting your TAU token."},{"location":"api/connecting/#connecting-to-the-realtime-websocket","text":"TAU exposes a websocket endpoint at ws://localhost:PORT/ws/twitch-events/ for a local deployment or wss://yourdomain:PORT/ws/twitch-events/ for a served deployment. After connecting your client to the websocket, you must send a message containing the following json object: { \"token\": \"YOUR TAU TOKEN HERE\" } After receiving your token, TAU will begin to broadcast incoming twitch events to your client.","title":"Connecting to the realtime websocket."},{"location":"api/connecting/#connecting-to-the-rest-api","text":"TAU also provides 2 separate REST APIs. A passthrough of the Twitch Helix API at: /api/twitch/helix , and access to the data captured and stored by TAU at /api/v1 . In order to authenticate requests, you must include an Authorization header: Authorization: Token YOUR-TAU-TOKEN-HERE The Update Token Scopes page from the dashboard will allow you to add scopes to the Twitch token used by TAU.","title":"Connecting to the REST API"},{"location":"api/connecting/#connecting-to-chat-bot-websockets","text":"TAU also provides websockets for your streamer user chat, and any chat bots you have set up at ws/chat-bots/<chat-bot-username>/ where <chat-bot-username> is the all-lowercase twitch username of your streamer account or any chat-bot accounts you have set up in TAU. After connecting your client to the websocket, you must send a message containing the following json object: { \"token\": \"YOUR TAU TOKEN HERE\" } After receiving your token, TAU will begin to broadcast incoming twitch chat events to your client. You can also send outgoing messages to be posted in chat by your bot. Simply send the following payload to the endpoint of the bot you would like to have \"speak\": { \"irc_channel\": \"channel_to_send_to\", \"message\": \"message to post in channel.\" }","title":"Connecting to Chat Bot Websockets"},{"location":"api/users/","text":"Users Supports registering, viewing, and updating user accounts. Register a new user account Request : POST /users/ Parameters: Name Type Required Description username string Yes The username for the new user. password string Yes The password for the new user account. first_name string No The user's given name. last_name string No The user's family name. email string No The user's email address. Note: Not Authorization Protected Response : Content-Type application/json 201 Created { \"id\": \"6d5f9bae-a31b-4b7b-82c4-3853eda2b011\", \"username\": \"richard\", \"first_name\": \"Richard\", \"last_name\": \"Hendriks\", \"email\": \"richard@piedpiper.com\", \"auth_token\": \"132cf952e0165a274bf99e115ab483671b3d9ff6\" } The auth_token returned with this response should be stored by the client for authenticating future requests to the API. See Authentication . Get a user's profile information Request : GET /users/:id Parameters: Note: Authorization Protected Response : Content-Type application/json 200 OK { \"id\": \"6d5f9bae-a31b-4b7b-82c4-3853eda2b011\", \"username\": \"richard\", \"first_name\": \"Richard\", \"last_name\": \"Hendriks\", \"email\": \"richard@piedpiper.com\", } Update your profile information Request : PUT/PATCH /users/:id Parameters: Name Type Description first_name string The first_name of the user object. last_name string The last_name of the user object. email string The user's email address. Note: All parameters are optional Authorization Protected Response : Content-Type application/json 200 OK { \"id\": \"6d5f9bae-a31b-4b7b-82c4-3853eda2b011\", \"username\": \"richard\", \"first_name\": \"Richard\", \"last_name\": \"Hendriks\", \"email\": \"richard@piedpiper.com\", }","title":"Users"},{"location":"api/users/#users","text":"Supports registering, viewing, and updating user accounts.","title":"Users"},{"location":"api/users/#register-a-new-user-account","text":"Request : POST /users/ Parameters: Name Type Required Description username string Yes The username for the new user. password string Yes The password for the new user account. first_name string No The user's given name. last_name string No The user's family name. email string No The user's email address. Note: Not Authorization Protected Response : Content-Type application/json 201 Created { \"id\": \"6d5f9bae-a31b-4b7b-82c4-3853eda2b011\", \"username\": \"richard\", \"first_name\": \"Richard\", \"last_name\": \"Hendriks\", \"email\": \"richard@piedpiper.com\", \"auth_token\": \"132cf952e0165a274bf99e115ab483671b3d9ff6\" } The auth_token returned with this response should be stored by the client for authenticating future requests to the API. See Authentication .","title":"Register a new user account"},{"location":"api/users/#get-a-users-profile-information","text":"Request : GET /users/:id Parameters: Note: Authorization Protected Response : Content-Type application/json 200 OK { \"id\": \"6d5f9bae-a31b-4b7b-82c4-3853eda2b011\", \"username\": \"richard\", \"first_name\": \"Richard\", \"last_name\": \"Hendriks\", \"email\": \"richard@piedpiper.com\", }","title":"Get a user's profile information"},{"location":"api/users/#update-your-profile-information","text":"Request : PUT/PATCH /users/:id Parameters: Name Type Description first_name string The first_name of the user object. last_name string The last_name of the user object. email string The user's email address. Note: All parameters are optional Authorization Protected Response : Content-Type application/json 200 OK { \"id\": \"6d5f9bae-a31b-4b7b-82c4-3853eda2b011\", \"username\": \"richard\", \"first_name\": \"Richard\", \"last_name\": \"Hendriks\", \"email\": \"richard@piedpiper.com\", }","title":"Update your profile information"},{"location":"api/v1/","text":"v1 Endpoints Twitch Events The twitch events endpoint allows you to query the twitch events stored in the database, as well as the ability to trigger test events. GET /api/v1/twitch-events Get a list of the most recent events that have been received. This endpoint is paginated, meaning that you may need to make multiple requests to get the data that you want. To know the URLs for pagination, see the next and previous fields in. Request curl http://<TAU_SERVER>/api/v1/twitch-events -H 'Authorization: Token <AUTH_TOKEN>' Response { \"next\": \"http://localhost:8000/api/v1/twitch-events?cursor=cD0yMDIxLTA2LTI1KzA0JTNBMDclM0ExMS4zMTczOTclMkIwMCUzQTAw\", \"previous\": null, \"results\": [ { \"id\": \"cd1d8698-7d36-4a0e-9f60-e796b2cf277f\", \"event_id\": \"ln5OqB4kadShCJmzcwNq9qUxhJMMnZEhm3jMRW77vL8=\", \"event_type\": \"stream-offline\", \"event_source\": \"EventSub\", \"event_data\": { \"broadcaster_user_id\": \"501585826\", \"broadcaster_user_name\": \"4DavidBlue\", \"broadcaster_user_login\": \"4davidblue\" }, \"created\": \"2021-06-26T05:42:29+0000\", \"origin\": \"twitch\" }, ... } ] } Filters are also supported by the twitch events endpoint in order to limit results. Supported filters: Event Type ( event_type ) User ID ( user_id ) Username ( user_name ) Reward ID ( reward_id ) Raid From User Name ( raid_from ) Raid To User Name ( raid_to ) Filters can be specified using query parameters, and multiple filters can be specified, for example to get all raid events from BaldBeardedBuilder : Request curl http://<TAU_SERVER>/api/v1/twitch-events?event_type=raid&user_name=baldbeardedbuilder -H 'Authorization: Token <AUTH_TOKEN>' or use the raid_from filter without specifying the raid event type: curl http://<TAU_SERVER>/api/v1/twitch-events?raid_from=baldbeardedbuilder -H 'Authorization: Token <AUTH_TOKEN>' POST /api/v1/twitch-events Leveraging POST requests you are able to add entries to the database. Note this endpoint will make the event origin appear as coming from twitch. Request curl --request POST http://<TAU_SERVER>/api/v1/twitch-events -H 'Authorization: Token <AUTH_TOKEN>' -H 'Content-type: application/json' --data '{\"event_type\":\"stream-offline\",\"event_source\":\"EventSub\",\"event_data\":{\"broadcaster_user_id\":\"536397236\",\"broadcaster_user_name\":\"FiniteSingularity\",\"broadcaster_user_login\":\"finitesingularity\"}}' Response: { \"id\": \"d760ecf6-266d-4e7d-9c18-05fe6ce07abf\", \"event_id\": null, \"event_type\": \"stream-offline\", \"event_source\": \"EventSub\", \"event_data\": { \"broadcaster_user_id\": \"536397236\", \"broadcaster_user_name\": \"FiniteSingularity\", \"broadcaster_user_login\": \"finitesingularity\" }, \"created\": \"2021-06-26T18:47:36+0000\", \"origin\": \"twitch\" } POST /api/v1/twitch-events/<EVENT_TYPE>/test Use this endpoint to create test entries that are sent to your application and stored in the database. Request curl --request POST http://<TAU_SERVER>/api/v1/twitch-events/stream-offline/test -H 'Authorization: Token <AUTH_TOKEN>' -H 'Content-type: application/json' --data '{\"broadcaster_user_id\":\"536397236\",\"broadcaster_user_name\":\"FiniteSingularity\",\"broadcaster_user_login\":\"finitesingularity\"}' Response { \"id\": null, \"event_id\": \"0c22e9ab-0c13-44e8-9ce1-c4f5cab11d51\", \"event_type\": \"stream-offline\", \"event_source\": \"TestCall\", \"event_data\": { \"broadcaster_user_id\": \"536397236\", \"broadcaster_user_name\": \"FiniteSingularity\", \"broadcaster_user_login\": \"finitesingularity\" }, \"created\": \"2021-06-27T17:39:19.753994+00:00\", \"origin\": \"test\" } Heartbeats The heartbeat endpoint allows you to perform a health check on the server application. It does not require authentication/authorization, and on success will return an http 200 with the message outlined below. GET /api/v1/heartbeat Request curl http://<TAU_SERVER>/api/v1/heartbeat Response { \"message\": \"pong\" } Streamers The streamers API lists all the streamers that you are monitoring for notifications when they go online/offline. You can also get a list of their streams on a nested endpoint. GET /api/v1/streamers Get the list of streamers TAU is monitoring for online/offline notifications Request curl http:<TAU_SERVER>/api/v1/streamers -H 'Authorization: Token <AUTH_TOKEN>' Response [ { \"id\": \"e61a6604-9757-4b89-9f0d-4b9b446e95f8\", \"twitch_username\": \"FiniteSingularity\", \"twitch_id\": \"536397236\", \"streaming\": false, \"disabled\": false, \"created\": \"2021-06-24T04:13:40+0000\", \"updated\": \"2021-06-26T06:52:49+0000\" } ] POST /api/v1/streamers Add a streamer to monitor for online/offline notifications Request curl --request POST http://<TAU_SERVER>/api/v1/streamers -H 'Authorization: Token <AUTH_TOKEN>' -H 'Content-type: application/json' --data '{\"twitch_username\":\"TwitchDev\",\"streaming\":false,\"disabled\":false}' Response { \"id\": \"1e10ea57-4c7d-475c-9d09-b15083b7cc79\", \"twitch_username\": \"TwitchDev\", \"twitch_id\": \"141981764\", \"streaming\": false, \"disabled\": false, \"created\": \"2021-06-27T01:23:17+0000\", \"updated\": \"2021-06-27T01:23:17+0000\" } GET /api/v1/streamers/<ID> Get the details for a specific streamer Request curl http:<TAU_SERVER>/api/v1/streamers/<ID> -H 'Authorization: Token <AUTH_TOKEN>' Response { \"id\": \"e61a6604-9757-4b89-9f0d-4b9b446e95f8\", \"twitch_username\": \"FiniteSingularity\", \"twitch_id\": \"536397236\", \"streaming\": false, \"disabled\": false, \"created\": \"2021-06-24T04:13:40+0000\", \"updated\": \"2021-06-26T06:52:49+0000\" } GET /api/v1/streamers/<ID>/streams Get a list of streams for a specific streamer Request curl http:<TAU_SERVER>/api/v1/streamers/<ID>/streams -H 'Authorization: Token <AUTH_TOKEN>' Response { \"count\": 3, \"next\": null, \"previous\": null, \"results\": [ { \"id\": \"36071e1c-bccd-46f6-bae7-5662f748dece\", \"stream_id\": \"42566059805\", \"user_id\": \"501585826\", \"user_login\": \"4davidblue\", \"user_name\": \"4davidblue\", \"game_id\": \"509658\", \"game_name\": \"Just Chatting\", \"type\": \"live\", \"title\": \"CELEBRITY GUEST \ud83e\udc46 !guest !wp !gif !donate !freesub\", \"viewer_count\": 0, \"started_at\": \"2021-06-26T23:51:07+0000\", \"ended_at\": null, \"language\": \"en\", \"thumbnail_url\": \"https://static-cdn.jtvnw.net/previews-ttv/live_user_4davidblue-{width}x{height}.jpg\", \"tag_ids\": null, \"is_mature\": false }, ... ] } GET /api/v1/streamers/<ID>/streams/latest Gets the latest stream for a specific streamer Request curl http:<TAU_SERVER>/api/v1/streamers/<ID>/streams/latest -H 'Authorization: Token <AUTH_TOKEN>' Response { \"id\": \"36071e1c-bccd-46f6-bae7-5662f748dece\", \"stream_id\": \"42566059805\", \"user_id\": \"501585826\", \"user_login\": \"4davidblue\", \"user_name\": \"4davidblue\", \"game_id\": \"509658\", \"game_name\": \"Just Chatting\", \"type\": \"live\", \"title\": \"CELEBRITY GUEST \ud83e\udc46 !guest !wp !gif !donate !freesub\", \"viewer_count\": 0, \"started_at\": \"2021-06-26T23:51:07+0000\", \"ended_at\": null, \"language\": \"en\", \"thumbnail_url\": \"https://static-cdn.jtvnw.net/previews-ttv/live_user_4davidblue-{width}x{height}.jpg\", \"tag_ids\": null, \"is_mature\": false } Twitch Scopes Lists the available twitch scopes and if they are required or not GET /api/v1/twitch/scopes Request curl http://<TAU_SERVER>/api/v1/twitch/scopes -H 'Authorization: Token <AUTH_TOKEN>' Response [ { \"id\": \"a2da0132-760a-4776-8c2d-827ce177d07f\", \"scope\": \"analytics:read:extensions\", \"required\": false }, { \"id\": \"65c285f5-4b6e-4a3d-9e72-b562b94a7785\", \"scope\": \"analytics:read:games\", \"required\": false }, ... ] POST /api/v1/twitch/scopes Create a new scope, be careful you probably don't want to do this , if you add a duplicate it will mess up the UI. Request curl --request POST http://<TAU_SERVER>/api/v1/twitch/scopes/ -H 'Authorization: Token <AUTH_TOKEN>' -H 'Content-type: application/json' --data '{\"scope\":\"user:read:subscriptions\",\"required\":false}' Response { \"id\": \"11585ceb-cae2-4c3a-b6ff-60e774632fc2\", \"scope\": \"user:read:subscriptions\", \"required\": false } GET /api/v1/twitch/scopes/<ID> Get information on a specific twitch scope by ID Request curl http://<TAU_SERVER>/api/v1/twitch/scopes/<ID> -H 'Authorization: Token <AUTH_TOKEN>' Response { \"id\": \"524836e3-71b3-4521-8b07-e7d44d754926\", \"scope\": \"user:read:subscriptions\", \"required\": false } Helix Endpoints A breakdown of helix endpoints, what HTTP method they use, and what scope they require GET /api/v1/twitch/helix-endpoints Gets data on all the helix endpoints Request curl http://<TAU_SERVER>/api/v1/twitch/helix-endpoints -H 'Authorization: Token <AUTH_TOKEN>' Response [ { \"id\": \"3e2dc3a8-3faa-4fd8-9c96-b6f1a86c846c\", \"description\": \"Start Commercial\", \"endpoint\": \"channels/commercial\", \"method\": \"POST\", \"reference_url\": \"https://dev.twitch.tv/docs/api/reference#start-commercial\", \"token_type\": \"OA\", \"scope\": \"f2be15e3-efe4-4e1f-b3df-013981ebdc61\" }, ... ] POST /api/v1/twitch/helix-endpoints Create a new helix endpoint definition, be careful you probably don't want to do this , if you add a duplicate it will mess up the UI. Request curl --request POST http://<TAU_SERVER>/api/v1/twitch/helix-endpoints -H 'Authorization: Token <AUTH_TOKEN>' -H 'Content-type: application/json' --data '{\"description\":\"Get Webhook Subscriptions\",\"endpoint\":\"webhooks/subscriptions\",\"method\":\"GET\",\"reference_url\":\"https://dev.twitch.tv/docs/api/reference#get-webhook-subscriptions\",\"token_type\":\"AP\",\"scope\":null}' Response { \"id\": \"5e256700-1cfe-4eef-bf0b-dd3c6f541377\", \"description\": \"Get Webhook Subscriptions\", \"endpoint\": \"webhooks/subscriptions\", \"method\": \"GET\", \"reference_url\": \"https://dev.twitch.tv/docs/api/reference#get-webhook-subscriptions\", \"token_type\": \"AP\", \"scope\": null } GET /api/v1/twitch/helix-endpoints/<ID> Get the details for a specific helix endpoint by ID Request curl http://<TAU_SERVER>/api/v1/twitch/helix-endpoints/<ID> -H 'Authorization: Token <AUTH_TOKEN>' Response { \"id\": \"5e256700-1cfe-4eef-bf0b-dd3c6f541377\", \"description\": \"Get Webhook Subscriptions\", \"endpoint\": \"webhooks/subscriptions\", \"method\": \"GET\", \"reference_url\": \"https://dev.twitch.tv/docs/api/reference#get-webhook-subscriptions\", \"token_type\": \"AP\", \"scope\": null }","title":"V1"},{"location":"api/v1/#v1-endpoints","text":"","title":"v1 Endpoints"},{"location":"api/v1/#twitch-events","text":"The twitch events endpoint allows you to query the twitch events stored in the database, as well as the ability to trigger test events.","title":"Twitch Events"},{"location":"api/v1/#get-apiv1twitch-events","text":"Get a list of the most recent events that have been received. This endpoint is paginated, meaning that you may need to make multiple requests to get the data that you want. To know the URLs for pagination, see the next and previous fields in.","title":"GET /api/v1/twitch-events"},{"location":"api/v1/#request","text":"curl http://<TAU_SERVER>/api/v1/twitch-events -H 'Authorization: Token <AUTH_TOKEN>'","title":"Request"},{"location":"api/v1/#response","text":"{ \"next\": \"http://localhost:8000/api/v1/twitch-events?cursor=cD0yMDIxLTA2LTI1KzA0JTNBMDclM0ExMS4zMTczOTclMkIwMCUzQTAw\", \"previous\": null, \"results\": [ { \"id\": \"cd1d8698-7d36-4a0e-9f60-e796b2cf277f\", \"event_id\": \"ln5OqB4kadShCJmzcwNq9qUxhJMMnZEhm3jMRW77vL8=\", \"event_type\": \"stream-offline\", \"event_source\": \"EventSub\", \"event_data\": { \"broadcaster_user_id\": \"501585826\", \"broadcaster_user_name\": \"4DavidBlue\", \"broadcaster_user_login\": \"4davidblue\" }, \"created\": \"2021-06-26T05:42:29+0000\", \"origin\": \"twitch\" }, ... } ] } Filters are also supported by the twitch events endpoint in order to limit results. Supported filters: Event Type ( event_type ) User ID ( user_id ) Username ( user_name ) Reward ID ( reward_id ) Raid From User Name ( raid_from ) Raid To User Name ( raid_to ) Filters can be specified using query parameters, and multiple filters can be specified, for example to get all raid events from BaldBeardedBuilder :","title":"Response"},{"location":"api/v1/#request_1","text":"curl http://<TAU_SERVER>/api/v1/twitch-events?event_type=raid&user_name=baldbeardedbuilder -H 'Authorization: Token <AUTH_TOKEN>' or use the raid_from filter without specifying the raid event type: curl http://<TAU_SERVER>/api/v1/twitch-events?raid_from=baldbeardedbuilder -H 'Authorization: Token <AUTH_TOKEN>'","title":"Request"},{"location":"api/v1/#post-apiv1twitch-events","text":"Leveraging POST requests you are able to add entries to the database. Note this endpoint will make the event origin appear as coming from twitch.","title":"POST /api/v1/twitch-events"},{"location":"api/v1/#request_2","text":"curl --request POST http://<TAU_SERVER>/api/v1/twitch-events -H 'Authorization: Token <AUTH_TOKEN>' -H 'Content-type: application/json' --data '{\"event_type\":\"stream-offline\",\"event_source\":\"EventSub\",\"event_data\":{\"broadcaster_user_id\":\"536397236\",\"broadcaster_user_name\":\"FiniteSingularity\",\"broadcaster_user_login\":\"finitesingularity\"}}'","title":"Request"},{"location":"api/v1/#response_1","text":"{ \"id\": \"d760ecf6-266d-4e7d-9c18-05fe6ce07abf\", \"event_id\": null, \"event_type\": \"stream-offline\", \"event_source\": \"EventSub\", \"event_data\": { \"broadcaster_user_id\": \"536397236\", \"broadcaster_user_name\": \"FiniteSingularity\", \"broadcaster_user_login\": \"finitesingularity\" }, \"created\": \"2021-06-26T18:47:36+0000\", \"origin\": \"twitch\" }","title":"Response:"},{"location":"api/v1/#post-apiv1twitch-eventsevent_typetest","text":"Use this endpoint to create test entries that are sent to your application and stored in the database.","title":"POST /api/v1/twitch-events/&lt;EVENT_TYPE&gt;/test"},{"location":"api/v1/#request_3","text":"curl --request POST http://<TAU_SERVER>/api/v1/twitch-events/stream-offline/test -H 'Authorization: Token <AUTH_TOKEN>' -H 'Content-type: application/json' --data '{\"broadcaster_user_id\":\"536397236\",\"broadcaster_user_name\":\"FiniteSingularity\",\"broadcaster_user_login\":\"finitesingularity\"}'","title":"Request"},{"location":"api/v1/#response_2","text":"{ \"id\": null, \"event_id\": \"0c22e9ab-0c13-44e8-9ce1-c4f5cab11d51\", \"event_type\": \"stream-offline\", \"event_source\": \"TestCall\", \"event_data\": { \"broadcaster_user_id\": \"536397236\", \"broadcaster_user_name\": \"FiniteSingularity\", \"broadcaster_user_login\": \"finitesingularity\" }, \"created\": \"2021-06-27T17:39:19.753994+00:00\", \"origin\": \"test\" }","title":"Response"},{"location":"api/v1/#heartbeats","text":"The heartbeat endpoint allows you to perform a health check on the server application. It does not require authentication/authorization, and on success will return an http 200 with the message outlined below.","title":"Heartbeats"},{"location":"api/v1/#get-apiv1heartbeat","text":"","title":"GET /api/v1/heartbeat"},{"location":"api/v1/#request_4","text":"curl http://<TAU_SERVER>/api/v1/heartbeat","title":"Request"},{"location":"api/v1/#response_3","text":"{ \"message\": \"pong\" }","title":"Response"},{"location":"api/v1/#streamers","text":"The streamers API lists all the streamers that you are monitoring for notifications when they go online/offline. You can also get a list of their streams on a nested endpoint.","title":"Streamers"},{"location":"api/v1/#get-apiv1streamers","text":"Get the list of streamers TAU is monitoring for online/offline notifications","title":"GET /api/v1/streamers"},{"location":"api/v1/#request_5","text":"curl http:<TAU_SERVER>/api/v1/streamers -H 'Authorization: Token <AUTH_TOKEN>'","title":"Request"},{"location":"api/v1/#response_4","text":"[ { \"id\": \"e61a6604-9757-4b89-9f0d-4b9b446e95f8\", \"twitch_username\": \"FiniteSingularity\", \"twitch_id\": \"536397236\", \"streaming\": false, \"disabled\": false, \"created\": \"2021-06-24T04:13:40+0000\", \"updated\": \"2021-06-26T06:52:49+0000\" } ]","title":"Response"},{"location":"api/v1/#post-apiv1streamers","text":"Add a streamer to monitor for online/offline notifications","title":"POST /api/v1/streamers"},{"location":"api/v1/#request_6","text":"curl --request POST http://<TAU_SERVER>/api/v1/streamers -H 'Authorization: Token <AUTH_TOKEN>' -H 'Content-type: application/json' --data '{\"twitch_username\":\"TwitchDev\",\"streaming\":false,\"disabled\":false}'","title":"Request"},{"location":"api/v1/#response_5","text":"{ \"id\": \"1e10ea57-4c7d-475c-9d09-b15083b7cc79\", \"twitch_username\": \"TwitchDev\", \"twitch_id\": \"141981764\", \"streaming\": false, \"disabled\": false, \"created\": \"2021-06-27T01:23:17+0000\", \"updated\": \"2021-06-27T01:23:17+0000\" }","title":"Response"},{"location":"api/v1/#get-apiv1streamersid","text":"Get the details for a specific streamer","title":"GET /api/v1/streamers/&lt;ID&gt;"},{"location":"api/v1/#request_7","text":"curl http:<TAU_SERVER>/api/v1/streamers/<ID> -H 'Authorization: Token <AUTH_TOKEN>'","title":"Request"},{"location":"api/v1/#response_6","text":"{ \"id\": \"e61a6604-9757-4b89-9f0d-4b9b446e95f8\", \"twitch_username\": \"FiniteSingularity\", \"twitch_id\": \"536397236\", \"streaming\": false, \"disabled\": false, \"created\": \"2021-06-24T04:13:40+0000\", \"updated\": \"2021-06-26T06:52:49+0000\" }","title":"Response"},{"location":"api/v1/#get-apiv1streamersidstreams","text":"Get a list of streams for a specific streamer","title":"GET /api/v1/streamers/&lt;ID&gt;/streams"},{"location":"api/v1/#request_8","text":"curl http:<TAU_SERVER>/api/v1/streamers/<ID>/streams -H 'Authorization: Token <AUTH_TOKEN>'","title":"Request"},{"location":"api/v1/#response_7","text":"{ \"count\": 3, \"next\": null, \"previous\": null, \"results\": [ { \"id\": \"36071e1c-bccd-46f6-bae7-5662f748dece\", \"stream_id\": \"42566059805\", \"user_id\": \"501585826\", \"user_login\": \"4davidblue\", \"user_name\": \"4davidblue\", \"game_id\": \"509658\", \"game_name\": \"Just Chatting\", \"type\": \"live\", \"title\": \"CELEBRITY GUEST \ud83e\udc46 !guest !wp !gif !donate !freesub\", \"viewer_count\": 0, \"started_at\": \"2021-06-26T23:51:07+0000\", \"ended_at\": null, \"language\": \"en\", \"thumbnail_url\": \"https://static-cdn.jtvnw.net/previews-ttv/live_user_4davidblue-{width}x{height}.jpg\", \"tag_ids\": null, \"is_mature\": false }, ... ] }","title":"Response"},{"location":"api/v1/#get-apiv1streamersidstreamslatest","text":"Gets the latest stream for a specific streamer","title":"GET /api/v1/streamers/&lt;ID&gt;/streams/latest"},{"location":"api/v1/#request_9","text":"curl http:<TAU_SERVER>/api/v1/streamers/<ID>/streams/latest -H 'Authorization: Token <AUTH_TOKEN>'","title":"Request"},{"location":"api/v1/#response_8","text":"{ \"id\": \"36071e1c-bccd-46f6-bae7-5662f748dece\", \"stream_id\": \"42566059805\", \"user_id\": \"501585826\", \"user_login\": \"4davidblue\", \"user_name\": \"4davidblue\", \"game_id\": \"509658\", \"game_name\": \"Just Chatting\", \"type\": \"live\", \"title\": \"CELEBRITY GUEST \ud83e\udc46 !guest !wp !gif !donate !freesub\", \"viewer_count\": 0, \"started_at\": \"2021-06-26T23:51:07+0000\", \"ended_at\": null, \"language\": \"en\", \"thumbnail_url\": \"https://static-cdn.jtvnw.net/previews-ttv/live_user_4davidblue-{width}x{height}.jpg\", \"tag_ids\": null, \"is_mature\": false }","title":"Response"},{"location":"api/v1/#twitch-scopes","text":"Lists the available twitch scopes and if they are required or not","title":"Twitch Scopes"},{"location":"api/v1/#get-apiv1twitchscopes","text":"","title":"GET /api/v1/twitch/scopes"},{"location":"api/v1/#request_10","text":"curl http://<TAU_SERVER>/api/v1/twitch/scopes -H 'Authorization: Token <AUTH_TOKEN>'","title":"Request"},{"location":"api/v1/#response_9","text":"[ { \"id\": \"a2da0132-760a-4776-8c2d-827ce177d07f\", \"scope\": \"analytics:read:extensions\", \"required\": false }, { \"id\": \"65c285f5-4b6e-4a3d-9e72-b562b94a7785\", \"scope\": \"analytics:read:games\", \"required\": false }, ... ]","title":"Response"},{"location":"api/v1/#post-apiv1twitchscopes","text":"Create a new scope, be careful you probably don't want to do this , if you add a duplicate it will mess up the UI.","title":"POST /api/v1/twitch/scopes"},{"location":"api/v1/#request_11","text":"curl --request POST http://<TAU_SERVER>/api/v1/twitch/scopes/ -H 'Authorization: Token <AUTH_TOKEN>' -H 'Content-type: application/json' --data '{\"scope\":\"user:read:subscriptions\",\"required\":false}'","title":"Request"},{"location":"api/v1/#response_10","text":"{ \"id\": \"11585ceb-cae2-4c3a-b6ff-60e774632fc2\", \"scope\": \"user:read:subscriptions\", \"required\": false }","title":"Response"},{"location":"api/v1/#get-apiv1twitchscopesid","text":"Get information on a specific twitch scope by ID","title":"GET /api/v1/twitch/scopes/&lt;ID&gt;"},{"location":"api/v1/#request_12","text":"curl http://<TAU_SERVER>/api/v1/twitch/scopes/<ID> -H 'Authorization: Token <AUTH_TOKEN>'","title":"Request"},{"location":"api/v1/#response_11","text":"{ \"id\": \"524836e3-71b3-4521-8b07-e7d44d754926\", \"scope\": \"user:read:subscriptions\", \"required\": false }","title":"Response"},{"location":"api/v1/#helix-endpoints","text":"A breakdown of helix endpoints, what HTTP method they use, and what scope they require","title":"Helix Endpoints"},{"location":"api/v1/#get-apiv1twitchhelix-endpoints","text":"Gets data on all the helix endpoints","title":"GET /api/v1/twitch/helix-endpoints"},{"location":"api/v1/#request_13","text":"curl http://<TAU_SERVER>/api/v1/twitch/helix-endpoints -H 'Authorization: Token <AUTH_TOKEN>'","title":"Request"},{"location":"api/v1/#response_12","text":"[ { \"id\": \"3e2dc3a8-3faa-4fd8-9c96-b6f1a86c846c\", \"description\": \"Start Commercial\", \"endpoint\": \"channels/commercial\", \"method\": \"POST\", \"reference_url\": \"https://dev.twitch.tv/docs/api/reference#start-commercial\", \"token_type\": \"OA\", \"scope\": \"f2be15e3-efe4-4e1f-b3df-013981ebdc61\" }, ... ]","title":"Response"},{"location":"api/v1/#post-apiv1twitchhelix-endpoints","text":"Create a new helix endpoint definition, be careful you probably don't want to do this , if you add a duplicate it will mess up the UI.","title":"POST /api/v1/twitch/helix-endpoints"},{"location":"api/v1/#request_14","text":"curl --request POST http://<TAU_SERVER>/api/v1/twitch/helix-endpoints -H 'Authorization: Token <AUTH_TOKEN>' -H 'Content-type: application/json' --data '{\"description\":\"Get Webhook Subscriptions\",\"endpoint\":\"webhooks/subscriptions\",\"method\":\"GET\",\"reference_url\":\"https://dev.twitch.tv/docs/api/reference#get-webhook-subscriptions\",\"token_type\":\"AP\",\"scope\":null}'","title":"Request"},{"location":"api/v1/#response_13","text":"{ \"id\": \"5e256700-1cfe-4eef-bf0b-dd3c6f541377\", \"description\": \"Get Webhook Subscriptions\", \"endpoint\": \"webhooks/subscriptions\", \"method\": \"GET\", \"reference_url\": \"https://dev.twitch.tv/docs/api/reference#get-webhook-subscriptions\", \"token_type\": \"AP\", \"scope\": null }","title":"Response"},{"location":"api/v1/#get-apiv1twitchhelix-endpointsid","text":"Get the details for a specific helix endpoint by ID","title":"GET /api/v1/twitch/helix-endpoints/&lt;ID&gt;"},{"location":"api/v1/#request_15","text":"curl http://<TAU_SERVER>/api/v1/twitch/helix-endpoints/<ID> -H 'Authorization: Token <AUTH_TOKEN>'","title":"Request"},{"location":"api/v1/#response_14","text":"{ \"id\": \"5e256700-1cfe-4eef-bf0b-dd3c6f541377\", \"description\": \"Get Webhook Subscriptions\", \"endpoint\": \"webhooks/subscriptions\", \"method\": \"GET\", \"reference_url\": \"https://dev.twitch.tv/docs/api/reference#get-webhook-subscriptions\", \"token_type\": \"AP\", \"scope\": null }","title":"Response"},{"location":"deployment/cloud/","text":"TAU Cloud Deployment","title":"Cloud"},{"location":"deployment/cloud/#tau-cloud-deployment","text":"","title":"TAU Cloud Deployment"},{"location":"deployment/local/","text":"TAU Local Deployment The simplest way to deploy TAU is locally, using Docker. Setting TAU up locally will use docker-compose to orchestrate the TAU, Redis, and Postgress containers, and will use ngrok to open a tunnel to your TUA instance for Twitch's webhooks. Get a Twitch Client ID and Client Secret Copy .env_sample to .env Open and edit the newly created .env file. Set the following values. Please do not use the # character in any of your passwords or secret keys. TWITCH_CLIENT_ID Set your twitch app client id. This is the \"Client ID\" available by clicking the \"Manage\" button for your app on this page: https://dev.twitch.tv/console/apps TWITCH_CLIENT_SECRET Set your twitch app secret. This is the \"Client Secret\" available by clicking the \"Manage\" button for your app on this page: https://dev.twitch.tv/console/apps If you don't already one (or you no longer have your original one), click \"New Secret\". You'll only be able to see it when you first make it so put it in your password manager. TWITCH_WEBHOOK_SECRET This secret is required for Twitch EventSub. It's one that you generate yourself (i.e. it's not the app client secret from the dev.twitch.tv page). The secret must be between 10-100 characters. You can use this one, or genrate one yourself. POSTGRES_PW This is the root password which will be set for your Postgres container. You can use the password set here but it is more secure to set your own strong password. You likely wont need to directly use this password at all. DJANGO_DB_PW This is the password used for the django database. You can use the random password already set, but it is more secure to set your own. You likely wont need to directly use this password at all. DJANGO_SECRET_KEY This is a random key for Django. You can use this one, but it's more secure to generate your own. PORT The default port is 8000. If you need to use another port, change it here. NGROK_TOKEN It is recommended that you use a free (or paid) ngrok account and token, as non-account tunnels have more limited connection counts. If you have an ngrok token you would like to use, uncomment the NGROK_TOKEN line and provide your token. After saving the .env file, in the root TAU directory execute the command: docker compose up Open a web browser and navigate to the url: http://localhost:PORT/ . Enter in a local TAU username, and password then click \"Create Account\". This does not need to be your twitch username. Enter in your Twitch username, and click Setup Channel. Authorize TAU to the requested scopes.","title":"Local"},{"location":"deployment/local/#tau-local-deployment","text":"The simplest way to deploy TAU is locally, using Docker. Setting TAU up locally will use docker-compose to orchestrate the TAU, Redis, and Postgress containers, and will use ngrok to open a tunnel to your TUA instance for Twitch's webhooks. Get a Twitch Client ID and Client Secret Copy .env_sample to .env Open and edit the newly created .env file. Set the following values. Please do not use the # character in any of your passwords or secret keys. TWITCH_CLIENT_ID Set your twitch app client id. This is the \"Client ID\" available by clicking the \"Manage\" button for your app on this page: https://dev.twitch.tv/console/apps TWITCH_CLIENT_SECRET Set your twitch app secret. This is the \"Client Secret\" available by clicking the \"Manage\" button for your app on this page: https://dev.twitch.tv/console/apps If you don't already one (or you no longer have your original one), click \"New Secret\". You'll only be able to see it when you first make it so put it in your password manager. TWITCH_WEBHOOK_SECRET This secret is required for Twitch EventSub. It's one that you generate yourself (i.e. it's not the app client secret from the dev.twitch.tv page). The secret must be between 10-100 characters. You can use this one, or genrate one yourself. POSTGRES_PW This is the root password which will be set for your Postgres container. You can use the password set here but it is more secure to set your own strong password. You likely wont need to directly use this password at all. DJANGO_DB_PW This is the password used for the django database. You can use the random password already set, but it is more secure to set your own. You likely wont need to directly use this password at all. DJANGO_SECRET_KEY This is a random key for Django. You can use this one, but it's more secure to generate your own. PORT The default port is 8000. If you need to use another port, change it here. NGROK_TOKEN It is recommended that you use a free (or paid) ngrok account and token, as non-account tunnels have more limited connection counts. If you have an ngrok token you would like to use, uncomment the NGROK_TOKEN line and provide your token. After saving the .env file, in the root TAU directory execute the command: docker compose up Open a web browser and navigate to the url: http://localhost:PORT/ . Enter in a local TAU username, and password then click \"Create Account\". This does not need to be your twitch username. Enter in your Twitch username, and click Setup Channel. Authorize TAU to the requested scopes.","title":"TAU Local Deployment"},{"location":"deployment/railway/","text":"Railway Deployment Railway is a cost effective way to run TAU 24/7 in the cloud. The following steps should get you started! These instructions assume you have cloned the TAU repo to your local drive, and that you have npm installed (the railway CLI app requires npm). Create a railway account/login Go to your railway dashboard Click \"+ New Project\" and select \"Empty Project\" Click \"+ New\" in the upper right, and select \"Database\" --> \"Add PostgreSQL\" Click \"+ New\" in the upper right, and select \"Database\" --> \"Add Redis\" Click \"+ New\" in the upper right, and select \"Empty Service\" Click on the new empty service which was just created. Click the \"Settings\" tab, then under \"Service\" change the \"Service Name\" to something similar to tau-twitchusername using your Twitch username In the same \"Settings\" tab under the \"Environment > Domains\", click the \"Generate Domain\" button. A new URL will be generated for you. You can edit this URL as you'd like. Note this domain, as it will be required in your environment variables, used when setting up TAU in the twitch dev dashboard, and the URL you will access the TAU Dashboard from. Get a Twitch Client ID and Client Secret . NOTE- rather than http://localhost:PORT/twitch-callback/ as your OAuth redirect URL, you must use https and the domain you set up in the prior step without a port. E.g.: https://tau-twitchname.up.railway.app/twitch-callback/ . To add environment variables to the new Empty Service, copy the sample .env data below. Back in the Empty Service you created, under the \"Variables\" section, click \"RAW Editor\", and paste in the sample .env data and fill out with required information and save. After, close the service panel (x in the upper right corner of the panel) Open a local terminal, navigate to your TAU root directory, and install the railway CLI using npm: npm i -g @railway/cli then login to railway: railway login In your railway project dashboard, click on \"Set up your project locally\" in the lower left. Copy the link command with your projects UUID (something like: railway link SOME-UUID-HERE ) Back in the terminal paste/run the link command. In the terminal, spin up your railway TAU instance (from the root TAU directory) with the command: railway up . After the container spins up, navigate to your projects url, and complete the setup wizard. Note- it can take a few minutes for everything to spin up. When you navigate to your project url, you may see a warning that the project is spinning up or isn't connecting properly. Be patient, and it should start working in a couple minutes. You're now running TAU on Railway! Sample .env data. All .env data should come from your local install of TAU (see your existing .env ). The first 6 values must be set. TWITCH_CLIENT_ID and TWITCH_CLIENT_SECRET come from the Twitch developer settings above, TWITCH_WEBHOOK_SECRET should be a random string of characters 10-100 characters long. DJANGO_DB_PW can be any password you want to set for the Django databse user, DJANGO_SECRET_KEY should be a different random string of characters 10-100 characters long, and PUBLIC_URL should be the deployment domain, e.g.- tau-twitchname.up.railway.app . The last two values ( DJANGO_CONFIGURATION and PORT ) should use the provided values below. TWITCH_CLIENT_ID= TWITCH_CLIENT_SECRET= TWITCH_WEBHOOK_SECRET= DJANGO_DB_PW= DJANGO_SECRET_KEY= PUBLIC_URL= DJANGO_CONFIGURATION=Railway PORT=443 Connecting to Websockets Now that TAU is deployed, you can connect to it via websockets at wss://tau-twitchname.up.railway.app:443/ws/twitch-events/ using your new deployment domain. Also note that wss times out after about 10 minutes, so you will need to add a disconnect listener in your consuming application to reconnect each time the websocket times out.","title":"Railway Deployment"},{"location":"deployment/railway/#railway-deployment","text":"Railway is a cost effective way to run TAU 24/7 in the cloud. The following steps should get you started! These instructions assume you have cloned the TAU repo to your local drive, and that you have npm installed (the railway CLI app requires npm). Create a railway account/login Go to your railway dashboard Click \"+ New Project\" and select \"Empty Project\" Click \"+ New\" in the upper right, and select \"Database\" --> \"Add PostgreSQL\" Click \"+ New\" in the upper right, and select \"Database\" --> \"Add Redis\" Click \"+ New\" in the upper right, and select \"Empty Service\" Click on the new empty service which was just created. Click the \"Settings\" tab, then under \"Service\" change the \"Service Name\" to something similar to tau-twitchusername using your Twitch username In the same \"Settings\" tab under the \"Environment > Domains\", click the \"Generate Domain\" button. A new URL will be generated for you. You can edit this URL as you'd like. Note this domain, as it will be required in your environment variables, used when setting up TAU in the twitch dev dashboard, and the URL you will access the TAU Dashboard from. Get a Twitch Client ID and Client Secret . NOTE- rather than http://localhost:PORT/twitch-callback/ as your OAuth redirect URL, you must use https and the domain you set up in the prior step without a port. E.g.: https://tau-twitchname.up.railway.app/twitch-callback/ . To add environment variables to the new Empty Service, copy the sample .env data below. Back in the Empty Service you created, under the \"Variables\" section, click \"RAW Editor\", and paste in the sample .env data and fill out with required information and save. After, close the service panel (x in the upper right corner of the panel) Open a local terminal, navigate to your TAU root directory, and install the railway CLI using npm: npm i -g @railway/cli then login to railway: railway login In your railway project dashboard, click on \"Set up your project locally\" in the lower left. Copy the link command with your projects UUID (something like: railway link SOME-UUID-HERE ) Back in the terminal paste/run the link command. In the terminal, spin up your railway TAU instance (from the root TAU directory) with the command: railway up . After the container spins up, navigate to your projects url, and complete the setup wizard. Note- it can take a few minutes for everything to spin up. When you navigate to your project url, you may see a warning that the project is spinning up or isn't connecting properly. Be patient, and it should start working in a couple minutes. You're now running TAU on Railway!","title":"Railway Deployment"},{"location":"deployment/railway/#sample-env-data","text":"All .env data should come from your local install of TAU (see your existing .env ). The first 6 values must be set. TWITCH_CLIENT_ID and TWITCH_CLIENT_SECRET come from the Twitch developer settings above, TWITCH_WEBHOOK_SECRET should be a random string of characters 10-100 characters long. DJANGO_DB_PW can be any password you want to set for the Django databse user, DJANGO_SECRET_KEY should be a different random string of characters 10-100 characters long, and PUBLIC_URL should be the deployment domain, e.g.- tau-twitchname.up.railway.app . The last two values ( DJANGO_CONFIGURATION and PORT ) should use the provided values below. TWITCH_CLIENT_ID= TWITCH_CLIENT_SECRET= TWITCH_WEBHOOK_SECRET= DJANGO_DB_PW= DJANGO_SECRET_KEY= PUBLIC_URL= DJANGO_CONFIGURATION=Railway PORT=443","title":"Sample .env data."},{"location":"deployment/railway/#connecting-to-websockets","text":"Now that TAU is deployed, you can connect to it via websockets at wss://tau-twitchname.up.railway.app:443/ws/twitch-events/ using your new deployment domain. Also note that wss times out after about 10 minutes, so you will need to add a disconnect listener in your consuming application to reconnect each time the websocket times out.","title":"Connecting to Websockets"},{"location":"deployment/twitch_dev/","text":"Twitch Setup Because TAU depends heavily on Twitch, it is necessary to obtain a Twitch App ID and secret. The steps below will help you do this. Determine the port you want to run TAU on. By default this is port 8000. Use this value for PORT in the following steps. Visit the Twitch Developer Applications Console . Log in to your Twitch account if you are not already logged in. In order to manage applications, you will need to enable 2FA for your account. Click \"+ Register Your Application\". Fill in a name for TAU. I recommend TAU- YourTwitchName. Add http://localhost:PORT/twitch-callback/ as an OAuth Redirect URL. (Note the trailing slash, this is required) Select a category for what you'll be using TAU for. Chat Bot is what I've used. Click \"Create\" Click \"Manage\" for the TAU app. Here is where you can find your Client ID, and generate a Client Secret. You'll need these two values later. Note- you can only see the client secret when you generate it, so make sure you copy it to put in your .env file later. Dont worry if you lose it, you can always generate a new secret.","title":"Twitch Setup"},{"location":"deployment/twitch_dev/#twitch-setup","text":"Because TAU depends heavily on Twitch, it is necessary to obtain a Twitch App ID and secret. The steps below will help you do this. Determine the port you want to run TAU on. By default this is port 8000. Use this value for PORT in the following steps. Visit the Twitch Developer Applications Console . Log in to your Twitch account if you are not already logged in. In order to manage applications, you will need to enable 2FA for your account. Click \"+ Register Your Application\". Fill in a name for TAU. I recommend TAU- YourTwitchName. Add http://localhost:PORT/twitch-callback/ as an OAuth Redirect URL. (Note the trailing slash, this is required) Select a category for what you'll be using TAU for. Chat Bot is what I've used. Click \"Create\" Click \"Manage\" for the TAU app. Here is where you can find your Client ID, and generate a Client Secret. You'll need these two values later. Note- you can only see the client secret when you generate it, so make sure you copy it to put in your .env file later. Dont worry if you lose it, you can always generate a new secret.","title":"Twitch Setup"}]}